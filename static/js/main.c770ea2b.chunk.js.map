{"version":3,"sources":["snake/Snake.js","food/Food.js","app_conts.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","snakeData","map","dot","i","style","left","top","className","key","Food","checkClassName","isSnakeNearFood","foodData","KeyCodes","App","useState","food","setFoodPosition","setFood","direction","seDirection","snakeDots","setSnakeData","score","setScore","highScore","setHighScore","setIsSnakeNearFood","Math","floor","random","checkKeyDown","e","dots","head","length","event","keyCode","moveSnake","push","shift","useEffect","gameOver","unshift","eatFood","checkSnakeNearFood","int","setInterval","window","onkeydown","clearInterval","display","justifyContent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c770ea2b.chunk.js","sourcesContent":["import React from 'react';\nimport './Snake.css'\n\nconst Snake = (props) => {\n  return (\n    <div>\n      {\n        props.snakeData.map((dot, i) => {\n          const style = {\n            left: `${dot[0]}%`,\n            top: `${dot[1]}%`\n          }\n          return (\n            <div className=\"snake\" key={i} style={style}></div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default Snake;","import React from 'react';\nimport './Food.css'\n\nconst Food = (props) => {\n  const checkClassName = props.isSnakeNearFood ? 'food' : 'food animate-food';\n  return (\n    <div>\n      {\n        props.foodData.map((dot, i) => {\n          const style = {\n            left: `${dot[0]}%`,\n            top: `${dot[1]}%`\n          }\n          return (\n            <div className={checkClassName} key={i} style={style}></div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default Food;","export const KeyCodes = {\n  UP: 38,\n  DOWN: 40,\n  LEFT: 37,\n  RIGHT: 39\n}","import React, { useState, useEffect } from 'react';\nimport Snake from './snake/Snake';\nimport Food from './food/Food';\nimport { KeyCodes } from './app_conts'\n\nfunction App() {\n  const [food, setFood] = useState({ food: [setFoodPosition()] });\n  const [direction, seDirection] = useState('RIGHT');\n  const [snakeData, setSnakeData] = useState({\n    snakeDots: [[0, 0], [2, 0], [4, 0]]\n  })\n  let [score, setScore] = useState(0);\n  let [highScore, setHighScore] = useState(0);\n  let [isSnakeNearFood, setIsSnakeNearFood] = useState(false);\n\n  function setFoodPosition() {\n    let min = 1;\n    let max = 98;\n    let x = (Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2);\n    let y = (Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2);\n\n    return [x, y];\n  }\n\n  useEffect(() => {\n    gameOver();\n    eatFood();\n    checkSnakeNearFood();\n    const int = setInterval(moveSnake, 200);\n    if (score > highScore) {\n      setHighScore(score);\n    }\n    window.onkeydown = checkKeyDown;\n    return () => clearInterval(int);\n  }, [direction, moveSnake, snakeData.snakeDots]);\n\n\n  function checkKeyDown(e) {\n\n    let dots = snakeData.snakeDots;\n    let head = dots[dots.length - 1];\n    const event = e.keyCode;\n\n    if (event === KeyCodes.RIGHT) {\n      if (head[1] !== dots[dots.length - 2][1]) {\n        seDirection('RIGHT');\n      }\n    } else if (event === KeyCodes.LEFT) {\n      if (head[1] !== dots[dots.length - 2][1]) {\n        seDirection('LEFT');\n      }\n    } else if (event === KeyCodes.DOWN) {\n      if (head[0] !== dots[dots.length - 2][0]) {\n        seDirection('DOWN');\n      }\n    } else if (event === KeyCodes.UP) {\n      if (head[0] !== dots[dots.length - 2][0]) {\n        seDirection('UP');\n      }\n    }\n  }\n\n  function gameOver() {\n    let head = snakeData.snakeDots[snakeData.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      reset();\n    }\n  }\n\n  function reset() {\n    setScore(0);\n    setSnakeData({\n      snakeDots: [\n        [0, 0],\n        [2, 0]\n      ]\n    })\n  }\n\n  function moveSnake() {\n    let dots = snakeData.snakeDots;\n    let head = dots[dots.length - 1];\n    switch (direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    setSnakeData({ snakeDots: dots });\n  }\n\n  function eatFood() {\n    let dots = snakeData.snakeDots;\n    let head = dots[0];\n    if (head[0] === food.food[0][0] && head[1] === food.food[0][1]) {\n      setScore(score + 1);\n      dots.unshift([]);\n      setFood({ food: [setFoodPosition()] });\n      setSnakeData({ snakeDots: dots });\n    }\n  }\n\n  function checkSnakeNearFood() {\n    let dots = snakeData.snakeDots;\n    let head = dots[dots.length - 1];\n    if (direction === 'RIGHT' || direction === 'LEFT') {\n      if (food.food[0][1] === head[1]) {\n        setIsSnakeNearFood(true);\n      } else {\n        setIsSnakeNearFood(false);\n      }\n    } else {\n      if (food.food[0][0] === head[0]) {\n        setIsSnakeNearFood(true);\n      } else {\n        setIsSnakeNearFood(false);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div>\n          Score: {score}\n        </div>\n        <div>\n          High Score: {highScore}\n        </div>\n      </div>\n      <div className=\"game\">\n        <Snake snakeData={snakeData.snakeDots}></Snake>\n        <Food foodData={food.food} isSnakeNearFood={isSnakeNearFood}></Food>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}