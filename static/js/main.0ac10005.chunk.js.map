{"version":3,"sources":["snake/Snake.js","food/Food.js","app_conts.js","utils/Utils.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","snakeData","map","snakeCoordinates","i","snakePosition","left","top","className","key","style","data-testid","Food","animateFood","isSnakeNearFood","bomb","foodPosition","foodData","KeyCodes","setFoodPosition","Math","floor","random","App","useState","food","apple","setFood","isBombAte","setIsBombAte","direction","setDirection","snakePositions","setSnakeData","score","setScore","highScore","setHighScore","snakeSpeed","setSnakeSpeed","setIsSnakeNearFood","checkKeyDown","e","head","length","event","keyCode","moveSnake","push","shift","useEffect","gameOver","unshift","eatFood","snake","pop","checkSnakecollapse","checkSnakeNearFood","snakeMoveinterval","setInterval","window","onkeydown","clearInterval","display","justifyContent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ac10005.chunk.js","sourcesContent":["import React from 'react';\nimport './Snake.css'\n\nconst Snake = (props) => {\n  return (\n    <div>\n      {\n        props.snakeData.map((snakeCoordinates, i) => {\n          const snakePosition = {\n            left: `${snakeCoordinates[0]}%`,\n            top: `${snakeCoordinates[1]}%`\n          }\n          return (\n            <div className=\"snake\" key={i} style={snakePosition} data-testid={`snake-${i}`}></div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default Snake;","import React from 'react';\nimport './Food.css'\n\nconst Food = (props) => {\n  const animateFood = props.isSnakeNearFood ? 'food' : 'food animate-food';\n  const bomb = props.isSnakeNearFood ? `bomb` : 'bomb animate-bomb';\n  const foodPosition = {\n    left: `${props.foodData[0]}%`,\n    top: `${props.foodData[1]}%`\n  }\n  return (\n    <div>\n      <div className={props.bomb ? bomb : animateFood} style={foodPosition}></div>\n    </div>\n  )\n}\n\nexport default Food;","export const KeyCodes = {\n  UP: 38,\n  DOWN: 40,\n  LEFT: 37,\n  RIGHT: 39,\n  ENTER: 13\n}","function setFoodPosition() {\n  let min = 1;\n  let max = 98;\n  let XCoordinate = (Math.floor((Math.random() * max + min) / 2) * 2);\n  let YCoordinate = (Math.floor((Math.random() * max + min) / 2) * 2);\n\n  return [XCoordinate, YCoordinate];\n}\n\nexport default setFoodPosition;","import React, { useState, useEffect } from 'react';\nimport Snake from './snake/Snake';\nimport Food from './food/Food';\nimport { KeyCodes } from './app_conts';\nimport setFoodPosition from './utils/Utils';\n\nconst App = () => {\n  const [food, setFood] = useState({ food: { apple: setFoodPosition(), bomb: setFoodPosition() } });\n  const [isBombAte, setIsBombAte] = useState(false);\n  const [direction, setDirection] = useState('RIGHT');\n  const [snakeData, setSnakeData] = useState({\n    snakePositions: [[50, 50], [52, 50], [54, 50]]\n  })\n  let [score, setScore] = useState(0);\n  let [highScore, setHighScore] = useState(0);\n  let [snakeSpeed, setSnakeSpeed] = useState(200);\n  let [isSnakeNearFood, setIsSnakeNearFood] = useState(false);\n\n  useEffect(() => {\n    gameOver();\n    eatFood();\n    checkSnakecollapse();\n    checkSnakeNearFood();\n    const snakeMoveinterval = setInterval(moveSnake, snakeSpeed);\n    if (score > highScore) {\n      setHighScore(score);\n    }\n    window.onkeydown = checkKeyDown;\n    return () => clearInterval(snakeMoveinterval);\n  }, [direction, moveSnake, snakeData.snakePositions]);\n\n\n  function checkKeyDown(e) {\n\n    let snakePositions = snakeData.snakePositions;\n    let head = snakePositions[snakePositions.length - 1];\n    const event = e.keyCode;\n\n    if (event === KeyCodes.RIGHT) {\n      if (head[1] !== snakePositions[snakePositions.length - 2][1]) {\n        setDirection('RIGHT');\n      }\n    } else if (event === KeyCodes.LEFT) {\n      if (head[1] !== snakePositions[snakePositions.length - 2][1]) {\n        setDirection('LEFT');\n      }\n    } else if (event === KeyCodes.DOWN) {\n      if (head[0] !== snakePositions[snakePositions.length - 2][0]) {\n        setDirection('DOWN');\n      }\n    } else if (event === KeyCodes.UP) {\n      if (head[0] !== snakePositions[snakePositions.length - 2][0]) {\n        setDirection('UP');\n      }\n    } else if (event === KeyCodes.ENTER) {\n      reset();\n    }\n  }\n\n  function gameOver() {\n    let head = snakeData.snakePositions[snakeData.snakePositions.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      setIsBombAte(true);\n    }\n  }\n\n  function reset() {\n    setDirection('RIGHT');\n    setSnakeSpeed(200)\n    setScore(0);\n    setSnakeData({\n      snakePositions: [[50, 50], [52, 50], [54, 50]]\n    })\n    setIsBombAte(false);\n  }\n\n  function moveSnake() {\n    let snakePositions = snakeData.snakePositions;\n    let head = snakePositions[snakePositions.length - 1];\n    switch (direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break;\n    }\n    snakePositions.push(head);\n    snakePositions.shift();\n    setSnakeData({ snakePositions: snakePositions });\n  }\n\n  function checkSnakecollapse() {\n    const snake = [...snakeData.snakePositions]\n    let head = snake[snake.length - 1];\n    snake.pop();\n    for (let snakeCoordinates of snake) {\n      if (head[0] === snakeCoordinates[0] && head[1] === snakeCoordinates[1]) {\n        setIsBombAte(true);\n      }\n    }\n  }\n\n  function eatFood() {\n    let snakePositions = snakeData.snakePositions;\n    let head = snakePositions[snakePositions.length - 1];\n    if (head[0] === food.food.apple[0] && head[1] === food.food.apple[1]) {\n      setScore(score + 1);\n      snakePositions.unshift([]);\n      setFood({ food: { apple: setFoodPosition(), bomb: setFoodPosition() } });\n      setSnakeData({ snakePositions: snakePositions });\n      if (snakeSpeed > 20) {\n        setSnakeSpeed(snakeSpeed - 10);\n      }\n    } else if (head[0] === food.food.bomb[0] && head[1] === food.food.bomb[1]) {\n      setIsBombAte(true);\n    }\n  }\n\n  function checkSnakeNearFood() {\n    let snakePositions = snakeData.snakePositions;\n    let head = snakePositions[snakePositions.length - 1];\n    if (direction === 'RIGHT' || direction === 'LEFT') {\n      if (food.food.apple[1] === head[1]) {\n        setIsSnakeNearFood(true);\n      } else {\n        setIsSnakeNearFood(false);\n      }\n    } else {\n      if (food.food.apple[0] === head[0]) {\n        setIsSnakeNearFood(true);\n      } else {\n        setIsSnakeNearFood(false);\n      }\n    }\n  }\n\n  function setBomb() {\n    if (score > 0 && score % 5 === 0) {\n      return <Food foodData={food.food.bomb} isSnakeNearFood={isSnakeNearFood} bomb={true}></Food>\n    } else {\n      return '';\n    }\n  }\n\n  return (\n    <div data-testid=\"container\">\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div>\n          Score: {score}\n        </div>\n        <div >\n          High Score: <span data-testid=\"highScore\">{highScore}</span>\n        </div>\n      </div>\n      <div className=\"game\">\n        {!isBombAte ? (<div>\n          <Snake snakeData={snakeData.snakePositions}></Snake>\n          <Food foodData={food.food.apple} isSnakeNearFood={isSnakeNearFood}></Food>\n          {setBomb()}\n        </div>) :\n          (<div className=\"endGame\">\n            <div className=\"bombText\">Ohh Noo!! You Died. Press enter to restart the game</div>\n            {highScore > 0 ?\n              <div className=\"highScoreText\">High Score : {highScore}</div> : ''}\n          </div>)}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}